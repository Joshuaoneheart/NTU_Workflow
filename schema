type Query {
  #parameters?
  name(query: String): [Student!]
  document(query: String): [Document!]
  workflow(query: String): [Workflow!]
}

type Mutation {
  createStudent(data: CreateStudentInput!): Student!
  CreateApplication(data: CreateApplicationInput!): Document!
}

type Subscription {
  #如果status更新 或是有comments:拒絕的理由或需要補件，都會通知teachers跟students
  workflow(comments: String, status: String): CommentSubscriptionPayload!
}

# only faculty members can create student users ?
input CreateStudentInput {
  name: String!
  id: String! #還是type要改成ID!
  department: String!
  grade: Int!
  email: String!
}

#命名:CreateDocument?
input CreateApplicationInput {
  #name: String! #登入已經有姓名
  title: String!
  body: String!
}

#公文, 學生, 老師, status? comments?
type Document {
  id: String! #ID!
  title: String!
  body: String!
  passBy: [teacher!]!
}

type Student {
  name: String!
  id: String!
  department: String!
  grade: Int!
  email: String!
  #apply: [Document] #可以不申請、array為空
}

type teacher {
  #id: String!
  name: String!
  department: String!
  email: String!
}

#一個document一個?因為也可以寫成array

type Workflow {
  id: String! #要跟document配對上，可是為什麼不寫在document裡面?
  status: String!
  comments: String!
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  data: workflow!
}

#for Subscription
enum MutationType {
  APPLY
  ACCEPT
  DECLINE
}
