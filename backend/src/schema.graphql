scalar Date

enum Status {
  PENDING
  ACCEPT
  DECLINE
}

type Query {
  salt: String #check
  signIn(email: String!, password: String!): User!
  findGroups:[String!]
  user(name: String, id: ID, groups: String): [User!]
  document(title: String): [Document!]
  workflow(status: Status, user_id: ID): [Workflow!]

  chatBox(name1: String, name2: String): ChatBox!
}

type Mutation {

  # stuff only
  createUser(input: CreateUserInput!): User!
  # stuff only
  createDocument(input: CreateDocumentInput!): Document!

  # student only
  #  createWorkflow(input: CreateWorkflowInput!): Workflow

  updateWorkflow(status: String, comments: String): Workflow

  createMessage(from: String!, to: String, message: String!): Message!
  createChatBox(name1: String!, name2: String!): ChatBox!
}

type Subscription {
  #如果status更新 或是有comments, 都會通知teachers跟當事的students
  workflowUpdate: Workflow!
  message(from: String!, to: String!): MessageSubscriptionPayload!
}

# only faculty members can create student users
input CreateUserInput {
  name: String!
  id: ID!
  department: String!
  groups: [String]
  role: String!
  password: String!
  email: String!
}

input CreateWorkflowInput {
  id: ID!
  document: ID!  #REVISE
  date: Date!
  approvalLine: [approvalPayloadInput]! # dictionary ?
  student: ID! #  ref
}

input CreateDocumentInput {
  id: ID!
  title: String!
  body: String!
  fields: [inputField!]! #可以又需要image, file, text
  passBy: [String!]!  #REVISE
}

type User {
  name: String!
  id: ID!
  department: String!
  groups: [String]
  role: String!
  password: String!
  email: String!
}

type Document {
  id: ID!
  title: String!
  body: String! #說明申請須知
  fields: [Field!]! #可以又需要image, file, text
  passBy: [String!]! #ref, pass in _id
}

enum FieldType {
  IMAGE
  FILE
  TEXT
}

type Field{
fieldType: FieldType!
name: String!
}

input inputField{
fieldType: FieldType!
name: String!
}

type Workflow {
  id: ID!
  document: Document! # REVICE
  status: Status!
  date: Date!
  comments: String
  contents: ContentPayload!
  approvalLine: [approvalPayload]!
  student: User! # REVICE
}

type File {
  _id: ID!
  path: String!
  filename: String!
  mimetype: String!
  encoding: String!
}

type ContentPayload {
  file: [File]
  image: [File]
  TEXT: [String]
}

type approvalPayload {
  stuff: User! 
  status: Status!
}

input approvalPayloadInput {
  stuff: ID! # REVICE
  status: Status!
}

#chatBox
type Message {
  id: ID!
  sender: User!
  body: String!
}

type ChatBox {
  id: ID!
  name: String!
  messages: [Message!]
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
  CLEARED
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  message: Message!
}
