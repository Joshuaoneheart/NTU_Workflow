scalar Date

enum Status {
  APPLY
  ACCEPT
  DECLINE
}

type Query {
  name(name: String, id:ID ): [Student!]
  document(title: String): [Document!]
  workflow(status: String, applicant: String): [Workflow!]
}

type Mutation {
  createStudent(data: CreateStudentInput!): Student!
  #申請時也創workflow
  createApplication(data: CreateApplicationInput!): Document!
  createWorkflow(data: CreateWorkflowInput!): Workflow!

  updateWorkflow(status: String, comments: String): Workflow!
}

type Subscription {
  #如果status更新 或是有comments, 都會通知teachers跟students
  workflowUpdate: Workflow!
}

# only faculty members can create student users
input CreateStudentInput {
  name: String!
  id: ID! 
  department: String!
  grade: Int!
  email: String!
}

input CreateApplicationInput {
  #name: String! #登入已經有姓名
  title: String!
  body: String!
}

input CreateWorkflowInput{
  id: ID! 
  documentId : ID! #how to reference?
  status: String!
  date: Date!
  comments: [String] 
  approvalLine: approvalPayload! # dictionary ?
  applicant: Student! #how to reference?
}


type Student {
  name: String!
  id: ID!
  department: String!
  grade: Int!
  email: String!
}

type Teacher {
  name: String!
  id: ID!
  department: String!
  email: String!
}

type Document {
  id: ID! 
  title: String!
  body: String!
  passBy: [Teacher!]!
}

type Workflow {
  id: ID! 
  documentId : ID!
  status: Status!
  date: Date!
  comments: [String] 
  approvalLine: approvalPayload! # dictionary ?
  applicant: Student!
}

type approvalPayload{
  teachers:[Teacher!]!
  approve: [String!]!
}

